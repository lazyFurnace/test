
复杂遍历用递归解决!
demo:
  function recursion(elems) {
    Array.prototype.map.call(elems, (d, i) => {
      if (d.nodeType == 3) {
        data.text.push($(d).text().trim());
      } else if (d.nodeName == "INPUT") {
        data.text.push(["input", $(d).val()]);
      } else {
        recursion(d.childNodes);
      }
    });
  };
  recursion(textDOM);
==================
直接取验证码
module.exports = React.createClass({
  handleClick:function(e){
		e.target.src='http://124.128.225.20:38080/Initial/Login.aspx?ccode=1&aa='+Math.random()*1000;
  },
  render: function(){
    return (
      <img onClick={this.handleClick}  src={'http://124.128.225.20:38080/Initial/Login.aspx?ccode=1'}/>
    )
  }
});
获取图片base64码
  function getBase64Image(img) {
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0, img.width, img.height);
    var dataURL = canvas.toDataURL("image/png");
    return dataURL; // return 
  }
  data = getBase64Image(elem);
====================
活用选择器 + ~ 都很好用
====================
function fireKeyEvent(el, evtType, keyCode){  
    var doc = el.ownerDocument,  
        win = doc.defaultView || doc.parentWindow,  
        evtObj;  
    if(doc.createEvent){  
        if(win.KeyEvent) {  
            evtObj = doc.createEvent('KeyEvents');  
            evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );  
        }  
        else {  
            evtObj = doc.createEvent('UIEvents');  
            Object.defineProperty(evtObj, 'keyCode', {  
                get : function() { return this.keyCodeVal; }  
            });       
            Object.defineProperty(evtObj, 'which', {  
                get : function() { return this.keyCodeVal; }  
            });  
            evtObj.initUIEvent( evtType, true, true, win, 1 );  
            evtObj.keyCodeVal = keyCode;  
            if (evtObj.keyCode !== keyCode) {  
                console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");  
            }  
        }  
        el.dispatchEvent(evtObj);  
    }   
    else if(doc.createEventObject){  
        evtObj = doc.createEventObject();  
        evtObj.keyCode = keyCode;  
        el.fireEvent('on' + evtType, evtObj);  
    }  
}  

fireKeyEvent(input元素, 'keydown', 13);  
===================================
typeof与instanceof  in运算符
===================================
pointer-events:none 点不了
===================================
同时处理多个函数 fun 里面switch case 
===================================
chrome://appcache-internals/#  	清除缓存
=====================================
pointer-events
=====================================
zepto的tap事件
=====================================
柯里化最简单的
Function.prototype.currying = function (text) {
	var that = this;
	return function (name) {
		that.apply(null,[text,name])
	}
}