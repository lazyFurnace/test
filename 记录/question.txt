问题  采集数据时开监听  云适配oa 审批页面 申请日期等时异步加载的 直接采集找不到数据的 要一直监控  不开找不到页面元素
==================
去除字符串两边的空格  trim（）；
==================
用jQuery绑定的事件 不能用平常的HTML事件 onchange()等触发  要使用jQuery的trigger()等方法
==================
React传值onClick={this.handleClick.bind(this,i)}    接收使用handleClick:function(i){}

<button onClick={this.handleClick.bind(this, props0, props1, ...}></button>
handleClick(porps0, props1, ..., event) {
    // your code here
}
==================
Century ；Bookman Old Style ；字体
Consolas
==================
select 多选问题
取option index 回调 当前index的option选项selected
==================
elem.dispatchEvent(new Event('input'))
elem.ownerDocument.defaultView找到当前window
event.initEvent("oneating", true, true);  
document.dispatchEvent(event);  
==================
移动端事件  touchstart，touchend，touchmove
移动端获取位置e.touches[0].pageX/Y
==================
-webkit-appearance:none;
修改checkbox默认样式
==================
react 属性 readonly变成readOnly  等等等...
==================
react render  中不能用setState
==================
js  禁止鼠标拖动  
ondragstart="return false"
==================
 event 事件信息  http://www.cnblogs.com/coolicer/archive/2010/10/04/1842653.html
==================
clientHeight,scrollHeight,offsetHeight,scrollTop,offsetTop概念
http://www.cnblogs.com/zourong/p/4049012.html
==================
复杂遍历用递归解决!
demo:
  function recursion(elems) {
    Array.prototype.map.call(elems, (d, i) => {
      if (d.nodeType == 3) {
        data.text.push($(d).text().trim());
      } else if (d.nodeName == "INPUT") {
        data.text.push(["input", $(d).val()]);
      } else {
        recursion(d.childNodes);
      }
    });
  };
  recursion(textDOM);
==================
直接取验证码
module.exports = React.createClass({
  handleClick:function(e){
		e.target.src='http://124.128.225.20:38080/Initial/Login.aspx?ccode=1&aa='+Math.random()*1000;
  },
  render: function(){
    return (
      <img onClick={this.handleClick}  src={'http://124.128.225.20:38080/Initial/Login.aspx?ccode=1'}/>
    )
  }
});
获取图片base64码
  function getBase64Image(img) {
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0, img.width, img.height);
    var dataURL = canvas.toDataURL("image/png");
    return dataURL; // return 
  }
  data = getBase64Image(elem);
====================
活用选择器 + ~ 都很好用
====================
function fireKeyEvent(el, evtType, keyCode){  
    var doc = el.ownerDocument,  
        win = doc.defaultView || doc.parentWindow,  
        evtObj;  
    if(doc.createEvent){  
        if(win.KeyEvent) {  
            evtObj = doc.createEvent('KeyEvents');  
            evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );  
        }  
        else {  
            evtObj = doc.createEvent('UIEvents');  
            Object.defineProperty(evtObj, 'keyCode', {  
                get : function() { return this.keyCodeVal; }  
            });       
            Object.defineProperty(evtObj, 'which', {  
                get : function() { return this.keyCodeVal; }  
            });  
            evtObj.initUIEvent( evtType, true, true, win, 1 );  
            evtObj.keyCodeVal = keyCode;  
            if (evtObj.keyCode !== keyCode) {  
                console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");  
            }  
        }  
        el.dispatchEvent(evtObj);  
    }   
    else if(doc.createEventObject){  
        evtObj = doc.createEventObject();  
        evtObj.keyCode = keyCode;  
        el.fireEvent('on' + evtType, evtObj);  
    }  
}  

fireKeyEvent(input元素, 'keydown', 13);  
===================================
typeof与instanceof  in运算符
===================================
pointer-events:none 点不了
===================================
同时处理多个函数 fun 里面switch case 
===================================
chrome://appcache-internals/#  	清除缓存
=====================================
pointer-events
=====================================
zepto的tap事件
=====================================
柯里化最简单的
Function.prototype.currying = function (text) {
	var that = this;
	return function (name) {
		that.apply(null,[text,name])
	}
}